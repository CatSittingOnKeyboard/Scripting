//SHARED LIBRARY

class Inventory {
  constructor(capacity=25) {
    if(!state.initialized) {
      state.initialized = true;

      state.inventory = [];
    }

    this.articles_filterOut = ['a','an','the','your'];

    this.capacity = capacity;
    this.capacity_remaining;
    this.quantityStored;

    this.isFull = false;
    this.isEmpty = true;

    this.output = '';
  }
  checkCapacity() {
    this.quantityStored = 0;
    for(let element of state.inventory) {
      this.quantityStored += element.quantity;
    }
    this.capacity_remaining = this.capacity - this.quantityStored;
    if(this.capacity_remaining <= 0) this.isFull = true;
    else{this.isFull = false;}
    if(this.quantityStored == 0 || state.inventory.length == 0) {
      this.isEmpty = true;
    } else { this.isEmpty = false; }
  }
  update(string) {
    this.receiveString_delete(string);
    this.receiveString_add(string);

    this.parse_check_inventory(string);
  }
  receiveString_add(string) {
    let items = this.parse_add_item(string);
    let items_defined = this.defineItems(items);
    this.add_items(items_defined);
  }
  receiveString_delete(string) {
    let items = this.parse_remove_item(string);
    let items_defined = this.defineItems(items);
    this.remove_items(items_defined);
  }
  add_items(items_defined) {
    //wont run if items contains no items
    for(let i_items = 0; i_items < state.inventory.length; i_items++) {
      for(let i_defined = items_defined.length-1; i_defined >= 0; i_defined--) {
        this.checkCapacity();
        while(items_defined[i_defined].quantity + this.quantityStored > this.capacity && items_defined[i_defined].quantity > 0) {
          items_defined[i_defined].quantity--;
          console.log('item exceeded capacity');
        }
        if(items_defined[i_defined].quantity == 0) {
          console.log('could not add item', items_defined[i_defined].name);
        }
        else {
          if(items_defined[i_defined].name == state.inventory[i_items].name) {
            state.inventory[i_items].quantity += items_defined[i_defined].quantity;
            items_defined.splice(i_defined, 1);
          } else if(i_items == state.inventory.length-1) {
            state.inventory.push(items_defined[i_defined])
            items_defined.splice(i_defined, 1);
          }
        }
      }
    }
    //incase there are no items currently stored
    if(state.inventory.length == 0) {
      for(let i_defined = items_defined.length-1; i_defined >= 0; i_defined--) {
        state.inventory.push(items_defined[i_defined]);
        items_defined.splice(i_defined, 1);
      }
    }
  }
  remove_items(items_defined) {
    for(let i_item = state.inventory.length-1; i_item >= 0; i_item--) {
      for(let item_remove of items_defined) {
        if(state.inventory[i_item].name == item_remove.name) {
          while(item_remove.quantity > state.inventory[i_item].quantity && item_remove.quantity > 0) {
            item_remove.quantity--;
            console.log('remove quantity of'+state.inventory[i_item].name+'decreased to'+item_remove.quantity);
          }
          state.inventory[i_item].quantity -= item_remove.quantity;

        }
      }
      if(state.inventory[i_item].quantity <= 0) {
        state.inventory.splice(i_item, 1);
      }
    }
  }
  defineItems(items_str) {
    let items_defined = [];

    let items_array = items_str.split(/(?:\s+and\s+)/gi);
    let quantity_re = /(\d)\s+/gi;

    for(let i = 0; i < items_array.length; i++) {
      if(items_array[i] !== '') {

        //filtering out articles
        for(let i_article = 0; i_article < this.articles_filterOut.length; i_article++) {
          let re_articles_filterOut = new RegExp('\\s*'+this.articles_filterOut[i_article]+'\\s+', 'gi');
          items_array[i] = items_array[i].replace(re_articles_filterOut, ''); // filter out articles
        }
        //creating object that will later be added into items_defined
        let item_defined = {
          name:items_array[i],
          quantity:1,
        };
        //add quantity property based on number infront of item
        if(quantity_re.test(items_array[i])) {
          item_defined.quantity = Number(items_array[i].split(quantity_re)[1]);
          item_defined.name = items_array[i].replace(quantity_re, '');
        }
        items_defined.push(item_defined);
      }
    }
    return(items_defined);
  }
  parse_add_item(string) {
    // (in literal form) add_inventory_regex = /(?:add|put|stash|add|store|pick up)\s+(?:(\d)?|(?:a|an|the|your))\s+(.*)\s+(?:put them into|in|into|inside|to)\s*(?:a|an|the|your)\s+(.*\s+)?\s*(inventory|bag|backpack|pouch|pocket)/gim;
    // (in object form) add_item_regex = new RegExp('\\b(?:'+action_add+')\\s+(?:(\\d)|(?:'+article+'))\\s+(.*)\\s+(?:put them into|in|into|inside|to)\\s*(?:'+article+')\\s+(.*\\s+)?\\s*('+inventory_word+')\\b', 'gi');
    let items_array = [];
    let items_str = '';
    let add_item_regex = /(?:add|put|stash|add|store|pick up)\s+(?:(\d*)|(a|an|the|your))\s+(.*)\s+(?:put them into|in|into|inside|to)\s*(?:a|an|the|your)\s+(.*\s+)?\s*(?:inventory|bag|backpack|pouch|pocket)/gim;
    if(add_item_regex.test(string)) {
      items_array = string.split(add_item_regex);
      if(typeof items_array[1] !== 'undefined') {
        items_str = items_array[1] +' '+ items_array[3];
      }
      else if(typeof items_array[2] !== 'undefined') {
        items_str = items_array[2] +' '+ items_array[3];
      }
      else {
        items_str = items_array[3];
      }

      // OUTPUT
      if(this.output == '') {
        this.output += ' You add '+items_str+' to your bag. ';
      }
      else {
        this.output += ' and you add '+items_str+' to your bag. ';
      }
    }
    return(items_str);
  }
  parse_remove_item(string) {
    // (in literal form) remove_inventory_regex = /(?:remove|take|take out|pull out|remove)\s+(?:(\d)?|(?:a|an|the|your))\s+(.*)\s+(?:from|out of)\s*(?:a|the|your)\s+(.*\s+)?\s*(inventory|bag|backpack|pouch|pocket)/gim;
    // (in object form) remove_item_regex = new RegExp('\\b(?:'+action_remove+')\\s+(?:(\\d)|(?:'+article+'))\\s+(.*)\\s+(?:from|out of)\\s*(?:'+article+')\\s+(.*\\s+)?\\s*('+inventory_word+')\\b');
    let items_array = [];
    let items_str = '';
    let remove_item_regex = /(?:remove|take out|pull out|take)\s+(?:(\d*)|(a|an|the|your))\s+(.*)\s+(?:from|out of)\s*(?:a|the|your)\s+(.*\s+)?\s*(?:inventory|bag|backpack|pouch|pocket)/gim;
    if(remove_item_regex.test(string)) {
      items_array = string.split(remove_item_regex);

      if(typeof items_array[1] !== 'undefined') {
        items_str = items_array[1] +' '+ items_array[3];
      }
      else if(typeof items_array[2] !== 'undefined') {
        items_str = items_array[2] +' '+ items_array[3];
      }
      else {
        items_str = items_array[3];
      }

      // OUTPUT
      if(this.output == '') {
        this.output += ' You remove '+items_str+' from your bag. ';
      }
      else {
        this.output += ' and you remove '+items_str+' from your bag. ';
      }
    }
    return(items_str);
  }
  parse_remove_item2(string) {
    //idea: use this second parser to use another regex so that if the string is 'take out your sword' it will work, instead of having to write 'take out your sword from your bag',
    //achieve this by substituting the 'sword' part for inventory items array

    //CURRENTLY NOT AN ACTIVE FUNCTION
    let items_array = [];
    let items_str = '';
    for(let i = 0; i < state.inventory.length; i++) {
      let re_remove_item = new RegExp('(?:(?:remove|take out|take|pull out)\\b)(.*)('+state.inventory[i].name+')\\b');
      if(re_remove_item.test(string)) {
        items_array = string.split(re_remove_item);
        if(typeof items_array[2] !== 'undefined') {
          items_array[1] = items_array[1].trim();
          items_str = items_array[1] +' '+ items_array[2];
        }
      }
    }
    return(items_str);
  }
  parse_check_inventory(string) {
    let re_check_inventory = /(?:check|rummage through|open|look into)\s+(?:your|a|the)\s+(?:bag|inventory|pockets|pouch)/gim;
    if(re_check_inventory.test(string)) {
      this.output = this.showInventory();
    }
  }

  showInventory() {
    let final_str = '';
    let items_str = '';
    let items_array = [];

    let stringBegins = [
      'You rummage through your bag to find:',
      'You look through your bag, you have:',
      'You check the contents of your bag, and find:',
      'You reach into your bag and find:'
    ];
    for(let element of state.inventory) {
      items_array.push(element.quantity.toString()+' '+element.name.toString());
    }
    items_str = items_array.join(', ');
    if(items_str !== '') {
      final_str = stringBegins[Math.floor(Math.random()*stringBegins.length)]+' '+items_str+'. ';
    }
    return(final_str);
  }
}

//INPUT MODIFIER

const modifier = (text) => {
  let modifiedText = text
  const lowered = text.toLowerCase()
  
  let bag = new Inventory();
  
  bag.update(lowered);
  state.message = bag.output;
  state.output = bag.output;
  
  console.log(state.inventory);
    
  // You must return an object with the text property defined.
  return { text: modifiedText }
}

// Don't modify this part
modifier(text)

